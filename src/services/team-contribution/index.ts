import chalk from 'chalk';
import inquirer from 'inquirer';

import { GitHubApiApolloClientImpl } from '../../infrastructures/apollo-github-api';
import { LineNotifyClientImpl } from '../../infrastructures/line-notify';
import { fetchContributionCount } from '../../scripts/fetchContributionCount';

import { BLACK_LIST_LOGIN_IDS } from './blackList';

export const teamContributionFunc = async () => {
  const githubAccessToken = process.env.GITHUB_ACCESS_TOKEN;
  const organizationId = process.env.ORGANIZATION_ID;

  if (!githubAccessToken) {
    console.error(
      chalk.red(
        'Error: .env„Éï„Ç°„Ç§„É´„Å´ GITHUB_ACCESS_TOKEN „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅÆ„ÅßÂº∑Âà∂ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ',
      ),
    );
    return;
  }
  if (!organizationId) {
    console.error(
      chalk.red(
        '.env„Éï„Ç°„Ç§„É´„Å´ ORGANIZATION_ID „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅÆ„ÅßÂº∑Âà∂ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ',
      ),
    );
    return;
  }

  console.log('Áõ£Ë¶ñÂØæË±°„Åã„ÇâÊòéÁ§∫ÁöÑ„ÅÆÈô§Â§ñ„Åï„Çå„Çã„É¶„Éº„Ç∂„Éº„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„Åß„Åô„ÄÇ');
  BLACK_LIST_LOGIN_IDS.forEach((id) => {
    console.log(`- ${id}`);
  });
  console.log('');

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const { passBlackListUser } = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'passBlackListUser',
      message: '‰ª•‰∏ä„ÅÆ„É¶„Éº„Ç∂„Éº„ÅßÂïèÈ°å„Å™„ÅÑ„Åß„Åô„ÅãÔºü',
      default: false,
    },
  ]);

  if (!passBlackListUser) {
    return;
  }

  const PeriodMenus = [
    {
      cliMessage: 'Âé≥ÂØÜ„Å´1ÈÄ±Èñì(7Êó•)',
      messageTitle: '‰ªäÈÄ±„ÅÆ„É©„É≥„Ç≠„É≥„Ç∞',
      size: 7,
    },
    {
      cliMessage: '„Åñ„Å£„Åè„Çä„Å®1ÈÄ±Èñì(8Êó•)',
      messageTitle: '‰ªäÈÄ±„ÅÆ„É©„É≥„Ç≠„É≥„Ç∞',
      size: 8,
    },
    { cliMessage: '‰∏Ä„É∂Êúà(31Êó•)', messageTitle: '‰ªäÊúà„ÅÆ„É©„É≥„Ç≠„É≥„Ç∞', size: 31 },
    {
      cliMessage: 'ÂçäÂπ¥(180Êó•)',
      messageTitle: 'ÂçäÂπ¥Èñì„ÅÆ„É©„É≥„Ç≠„É≥„Ç∞',
      size: 180,
    },
  ];

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const { periodMessage, maxSize } = await inquirer.prompt([
    {
      type: 'list',
      name: 'periodMessage',
      message: 'Êé¢Á¥¢ÊúüÈñì„Çí„ÅäÈÅ∏„Å≥„Åè„Å†„Åï„ÅÑ„ÄÇ',
      choices: PeriodMenus.map((menu) => menu.cliMessage),
    },
    {
      type: 'number',
      name: 'maxSize',
      message: 'Ë°®Á§∫„Åó„Åü„ÅÑÊúÄÂ§ß„É°„É≥„Éê„Éº„ÅÆÊï∞„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
    },
  ]);

  const watchPeriod = PeriodMenus.find(
    (menu) => menu.cliMessage === periodMessage,
  );

  if (!watchPeriod) {
    console.error(
      chalk.red(
        'Error: ÈÅ∏Êäû„Åï„Çå„ÅüÊé¢Á¥¢ÊúüÈñì„Åå‰∏çÊ≠£„Å™ÂÄ§„Åß„ÅÇ„Å£„Åü„Åü„ÇÅ„ÄÅÂº∑Âà∂ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ',
      ),
    );
    return;
  }

  const client = new GitHubApiApolloClientImpl(githubAccessToken);

  const memberIds = await client.fetchOrganizationMembers(organizationId);

  const requests = memberIds.map(async (id) => {
    const contributionCount = await fetchContributionCount(
      id,
      watchPeriod.size,
    );
    return { id, contributionCount };
  });

  const members = await Promise.all(requests);

  const activeMembers = members.filter((member) => {
    return (
      !!member.contributionCount && !BLACK_LIST_LOGIN_IDS.includes(member.id) // eslint-disable-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
    );
  });

  activeMembers.sort((a, b) =>
    a.contributionCount < b.contributionCount ? 1 : -1,
  );

  const displayMembers = activeMembers.slice(0, Number(maxSize));

  const title = `üéâ ${watchPeriod.messageTitle} üéâ`;

  const sumContributions = displayMembers.reduce(
    (prev, member) => member.contributionCount + prev,
    0,
  );
  let firstMessage = '';
  firstMessage += `Á∑ècontributionÊï∞: ${sumContributions}\n`;
  firstMessage += `Ë®àÊ∏¨Êó•Êï∞: ${watchPeriod.size}Êó•\n`;

  let message = '';

  displayMembers.forEach((member, idx) => {
    const _idx = idx + 1;
    const percent =
      Math.round((1000 * member.contributionCount) / sumContributions) / 10;
    message += `${_idx}‰Ωç: ${member.id}\n`;
    message += `contributionÊï∞: ${member.contributionCount} (${percent}%)\n`;
    if (_idx < displayMembers.length) {
      message += `\n`;
    }
  });

  const footer =
    '‚ñº„ÄÄÂÆüË£ÖÂÜÖÂÆπ:\nhttps://github.com/Conken-NitKit/conken-contribution';

  const resultMessage = `${title}\n${firstMessage}\n${message}\n${footer}`;

  console.log('');
  console.log('ÁµêÊûú„ÅØ‰ª•‰∏ã„ÅÆÈÄö„Çä„Åß„Åô„ÄÇ');
  console.log('');

  console.log(resultMessage);
  console.log('');

  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const { isNoticeToLine } = await inquirer.prompt([
    {
      type: 'confirm',
      name: 'isNoticeToLine',
      message: '„Åì„ÅÆÁµêÊûú„Çí LINE„Ç∞„É´„Éº„Éó „Å´ÈÄöÁü•„Åó„Åæ„Åô„ÅãÔºü',
      default: false,
    },
  ]);

  if (isNoticeToLine) {
    const lineNoticeToken = process.env.LINE_NOTICE_TOKEN;

    if (!lineNoticeToken) {
      console.error(
        chalk.red(
          'Error: .env„Éï„Ç°„Ç§„É´„Å´ LINE_NOTICE_TOKEN „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÅÆ„ÅßÂº∑Âà∂ÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ',
        ),
      );
      return;
    }

    const lineNotifyClient = new LineNotifyClientImpl(lineNoticeToken);
    lineNotifyClient.notifyMessage(resultMessage);
  }
};
